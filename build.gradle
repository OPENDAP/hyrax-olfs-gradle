import java.text.SimpleDateFormat

plugins {
    id 'java'
}

/*
group 'opendap'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.7
 */

/*
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
        // add tests sources here (this project didn't have them!)
    }
}
 */

/*
dependencies {
    // Add all the jar dependencies from the lib folder.
    compile fileTree(dir: 'lib', include: ['*.jar'])
}
 */

//Ant Targets: [init, clean, PreProcessSourceCode, compile, server, robots, hyrax-robots, hyrax-robots-dist]

    // Compiler Settings

/*
    project_ext.set("compile.debug", "on")
    project.ext.set("compile.debuglevel", "lines,vars,source")
    project.ext.set("compile.deprecation", "on")

    project.ext.set("compile.TARGET", "1.7")
    project.ext.set("compile.SOURCE", "1.7")

    project.ext.set("modern.compiler", "modern")
    project.ext.set("classic.compiler", "classic")
    project.ext.set("build.compiler", "${project.'modern.compiler'}")
    project.ext.set("build.sysclasspath", "ignore")
 */

    // Project directories
    project.ext.set("src_dir", "${projectDir}/src")
    project.ext.set("doc_dir", "${projectDir}/doc")
    project.ext.set("lib_dir", "${projectDir}/lib")
    project.ext.set("resources_dir", "${projectDir}/resources")
    project.ext.set("web_inf_resources_dir", "${resources_dir}/hyrax/WEB-INF\"/")
    project.ext.set("distribution_resources_dir", "${resources_dir}/distribution")

    // Build Directories
    project.ext.set("build_dir", "${buildDir}")
    project.ext.set("build_classes", "${build_dir}/classes")
    project.ext.set("build_docs", "${build_dir}/docs")
    project.ext.set("build_dist", "${build_dir}/dist")
    project.ext.set("build_lib", "${build_dir}/lib")
    project.ext.set("build_run", "${build_dir}/run")
    project.ext.set("build_src", "${build_dir}/src")
    project.ext.set("build_hyrax_resources", "${build_dir}/resources")

    project.ext.set("hyrax_resources_dir", "${resources_dir}/hyrax")
    project.ext.set("ngap_resources_dir", "${resources_dir}/ngap")
    project.ext.set("robots_resources_dir", "${resources_dir}/robots")
    project.ext.set("build_robots_resources", "${resources_dir}/robots")
    project.ext.set("wcs_resources_dir", "${resources_dir}/WCS/2.0")
/*

    // Libraries
    project.ext.set("json.lib", "gson-2.3.1.jar")
    project.ext.set("junit.lib", "junit-4.4.jar")
    project.ext.set("jdom.lib", "jdom-1.1.1.jar")
    project.ext.set("urlRewrite.lib", "urlrewrite-3.2.0.jar")
    project.ext.set("slf4j.lib", "slf4j-api-1.6.1.jar")
    project.ext.set("logback-core.lib", "logback-core-0.9.26.jar")
    project.ext.set("logback-classic.lib", "logback-classic-0.9.26.jar")
    project.ext.set("owlim.lib", "owlim-lite-4.3.jar")
    project.ext.set("openrdf-sesame.lib", "openrdf-sesame-2.6.2-onejar.jar")
    project.ext.set("commons-cli.lib", "apache-commons-cli-1.2.jar")
    project.ext.set("commons-codec.lib", "apache-commons-codec-1.8.jar")
    project.ext.set("commons-httpclient.lib", "apache-commons-httpclient-3.1.jar")
    project.ext.set("commons-lang.lib", "apache-commons-lang-2.5.jar")
    project.ext.set("commons-logging.lib", "apache-commons-logging-1.1.3.jar")
    project.ext.set("commons-io.lib", "apache-commons-io-2.4.jar")
    project.ext.set("http-components-httpclient.lib", "org.apache.httpcomponents.httpclient_4.5.3.jar")
    project.ext.set("http-components-httpcore.lib", "org.apache.httpcomponents.httpcore_4.4.6.jar")
    project.ext.set("xalan.lib", "xalan.jar")
    project.ext.set("xercesImpl.lib", "xercesImpl-2.8.1.jar")
    project.ext.set("xercesXmlApis.lib", "xml-apis-2.8.1.jar")
    project.ext.set("saxon-jdom.lib", "saxon-9.1.0.5-jdom.jar")
    project.ext.set("saxon-s9api.lib", "saxon-9.1.0.5-s9api.jar")
    project.ext.set("saxon.lib", "saxon-9.1.0.5.jar")
    project.ext.set("catalina.lib", "catalina-6.0.14.jar")
    project.ext.set("servlet-api.lib", "servlet-api-3.0.jar")
    project.ext.set("json.lib", "json-simple-1.1.1.jar")

    // WCS Libs
    project.ext.set("ogc-wcs.lib", "wcs-v_2_0-2.6.1.jar")
    project.ext.set("ogc-gml.lib", "gml-v_3_2_1-2.6.1.jar")
    project.ext.set("ogc-swe.lib", "sweCommon-v_2_0-2.6.1.jar")
    project.ext.set("ogc-gmlcov.lib", "gmlcov-v_1_0-2.6.1.jar")
    project.ext.set("ogc-ows.lib", "ows-v_2_0-2.6.1.jar")
    project.ext.set("ogc-jaxb.lib", "jaxb2-basics-runtime-0.11.0.jar")
    project.ext.set("jaxb-core.lib", "jaxb-core-2.3.0-b170127.1453.jar")
    project.ext.set("jaxb-impl.lib", "jaxb-impl-2.3.0-b170127.1453.jar")
    project.ext.set("xlink.lib", "xlink-v_1_0-1.4.0.jar")
    project.ext.set("owasp-encoder", "encoder-1.2.2.jar")
    project.ext.set("owasp-encoder-jsp", "encoder-jsp-1.2.2.jar")
 */

def  tstamp()
{
    Date today = new Date ()
    SimpleDateFormat df = new SimpleDateFormat ("MM/dd/yyyy_hh:mm")
    return df.format (today)
}

task init_dir {

    mkdir "${build_dir}"
    mkdir "${build_classes}"
    mkdir "${build_docs}"
    mkdir "${build_dist}"
    mkdir "${build_lib}"
    mkdir "${build_run}"
    mkdir "${build_src}"
    mkdir "${build_hyrax_resources}"

    // filter ???
    println("Time stamp: ${tstamp()}")

    /*
    println("hyrax-libs:")

    def path = ant.path {
        fileset(dir: 'lib', includes: '*.jar')
    }
    path.list().each {
        println it
    }
    */

}

task PreProcessSourceCode (type: Copy) {

    println("GradleFile: ${buildFile}. Moving and filtering Source code.")
    println("")
    println("HYRAX_VERSION:      ${HYRAX_VERSION}")
    println("OLFS_VERSION:       ${OLFS_VERSION}")
    println("WCS_VERSION:        ${WCS_VERSION}")
    println("DEPLOYMENT_CONTEXT: ${DEPLOYMENT_CONTEXT}")
    println("")

    from("${src_dir}") {
        include "opendap/**"
        include "org/opendap/**"
        //filter(ReplaceTokens, tokens: [version: '2.3.1'])
        exclude "opendap/cmr/**"
        // Exclude the experimental code
        exclude "opendap/experiments/**"
        // Exclude the Metacat code
        exclude "opendap/metacat/**"
        // Exclude WCS 1.1.2 and semantics code
        exclude "opendap/wcs/v1_1_2/**"
        exclude "opendap/semantics/**"
        // Exclude prototype Amazon Web Services code from production
        exclude "opendap/aws/**"
        exclude "opendap/noaa_s3/**"
        // Exclude async test code
        exclude "opendap/async/**"
    }

    into "${build_src}"

    //    into("${project.'build.robots.resources'}")
    //    from("${project.'robotsResources.dir'}")

    exclude '**/*.bak'
    includeEmptyDirs = false
}

task copyResources (type: Copy) {
    println("From: ${resources_dir}")
    from("${resources_dir}"){
        include "xsl/**"
        include "WEB-INF/**"
        exclude "WEB-INF/web.xml"
        exclude "WEB-INF/urlrewrite.xml"
        exclude "WEB-INF/logback.xml"
        exclude "WEB-INF/logback-test.xml"
    }
    println("To: ${build_hyrax_resources}")
    into("${build_hyrax_resources}")

    exclude '**/*.bak'
    includeEmptyDirs = false
}